source('packages.R')
source('functions.R')
source('load.R')
## times for GC sampling time
# changing to long format
dt <- melt(
dt,
id.vars = c( 'date', 'chamber', 'treat', 'ID', 't0'),
measure.vars = c('t0', 't1', 't2', 't3'),
variable.name = "round",
value.name = "time"
)
# correct time
dt[, time := gsub('\\.', ':', time)]
dt[, t0 := gsub('\\.', ':', t0)]
# making date.time stamps for initiation of sampling (.ini), first sampling of each id (t0) and sampling (.samp)
dt[, date.time.t0 := paste(date, t0)]
dt[, date.time.t0 := as.POSIXct(date.time.t0, format = '%y%m%d %H:%M:%S')]
dt <- melt(
dt,
id.vars = c( 'date', 'chamber', 'treat', 'ID', 't0'),
measure.vars = c('t0', 't1', 't2', 't3'),
variable.name = "round",
value.name = "time"
)
###### times for GC sampling
dt <- fread('../data/sample times.csv')
setnames(dt, as.character(unlist(dt[2, ])))
dt <- dt[-c(1:2), c(1:8)]
dt <- melt(
dt,
id.vars = c( 'date', 'chamber', 'treat', 'ID', 't0'),
measure.vars = c('t0', 't1', 't2', 't3'),
variable.name = "round",
value.name = "time"
)
# correct time
dt[, time := gsub('\\.', ':', time)]
dt[, t0 := gsub('\\.', ':', t0)]
# making date.time stamps for initiation of sampling (.ini), first sampling of each id (t0) and sampling (.samp)
dt[, date.time.t0 := paste(date, t0)]
dt[, date.time.t0 := as.POSIXct(date.time.t0, format = '%y%m%d %H:%M')]
dt[, date.time := paste(date, time)]
dt[, date.time := as.POSIXct(date.time, format = '%y%m%d %H:%M')]
# rounding date.time to nearest hour to combine with weather data in mearge.R
dt[, date.time.w := round_date(date.time, unit = "hour")]
View(df)
# changing date column to fit df
dt[, date := as.character(as.Date(date, format = "%y%m%d"))]
# creating id column in df
dt[, id := as.integer(sub("-.*", "", sample))]
# creating id column in df
df[, id := as.integer(sub("-.*", "", sample))]
View(dw)
dt <- fread('../data/climate.csv')
dw <- fread('../data/climate.csv')
# setwd(dirname(file.choose())) # used to set wd in base r
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
## times for GC sampling time
# changing to long format
dt <- melt(
dt,
id.vars = c( 'date', 'chamber', 'treat', 'ID', 't0'),
measure.vars = c('t0', 't1', 't2', 't3'),
variable.name = "round",
value.name = "time"
)
# correct time
dt[, time := gsub('\\.', ':', time)]
dt[, t0 := gsub('\\.', ':', t0)]
# making date.time stamps for initiation of sampling (.ini), first sampling of each id (t0) and sampling (.samp)
dt[, date.time.t0 := paste(date, t0)]
dt[, date.time.t0 := as.POSIXct(date.time.t0, format = '%y%m%d %H:%M')]
dt[, date.time := paste(date, time)]
dt[, date.time := as.POSIXct(date.time, format = '%y%m%d %H:%M')]
# rounding date.time to nearest hour to combine with weather data in mearge.R
dt[, date.time.w := round_date(date.time, unit = "hour")]
# changing date column to fit df
dt[, date := as.character(as.Date(date, format = "%y%m%d"))]
# creating id column in df
df[, id := as.integer(sub("-.*", "", sample))]
## weather data
# make date.time for combining with dt (GC data)
dw[, date.time.w := as.POSIXct(Timestamp, format = "%Y-%m-%d %H:%M:%S")]
## weather data
# make date.time for combining with dt (GC data)
dw[, date.time.w := as.POSIXct(Timestamp, format = "%Y-%m-%d %H:%M")]
## weather data
# make date.time for combining with dt (GC data)
dw[, date.time.w := as.POSIXct(Timestamp, format = "%d-%m-%y %H:%M")]
dw[, date.time.w := as.POSIXct(Timestamp, '%Y-%m-%d %H:%M')]
## weather data
# make date.time for combining with dt (GC data)
dw[, date.time.w := as.POSIXct(Timestamp, format = "%d-%m-%y %H:%M")]
# mearge GC conc data and sampling times
dd <- merge(df, dt, by = c('date', 'chamber', 'round'))
View(dd)
# mearge above with weather data
dd <- merge(dd, dw, by = 'date.time.w', all.x = TRUE)
View(dh)
# mearge above with frame volume and area data
dd <- merge(dd, dhh, by = 'ID', all.x = TRUE)
# mearge above with frame volume and area data
dd <- merge(dd, dh, by = 'ID', all.x = TRUE)
# mearge above with frame volume and area data
dh$ID <- as.character(dh$ID)
dd <- merge(dd, dh, by = 'ID', all.x = TRUE)
dd[!complete.cases(dd), ]
# check data table for incomplete cases
dd[!complete.cases(dd), ]
# setwd(dirname(file.choose())) # used to set wd in base r
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
source('clean.R')
source('mearge.R')
# calculating deploy time
dd[, deploy := as.numeric(difftime(date.time, date.time.t0, units = "hours"))]
## calculating N2O concentration (ug/L)
# constants
R <- 0.082056 # L atm K−1 mol−1
P.conv <- 1013.25 # hPa atm-1
K.0 <- 273.15 # K at 0C
Nn <- 28 # g mol-1
Cc <- 12 # g mol-1
# volume of 1 mol of N2O gas:
# PV = nRT => V / 1 mol = R * T / P
# L mol-1 <- L atm K-1 mol-1 * K * atm-1
dd[, L.mol := R * (K.0 + metp) / (pres / P.conv)]
# from ppm to ug L-1
dd[, N2Oppm := as.numeric(dd$N2Oppm)]
dd[, N2Oug.L := N2Oppm / L.mol * Nn]
dd[, CH4ppm := as.numeric(dd$CH4ppm)]
dd[, CH4ug.L := CH4ppm / L.mol * Cc]
dd[, CO2ppm := as.numeric(dd$CO2ppm)]
dd[, CO2ug.L := CO2ppm / L.mol * Cc]
ddd <- dd[, c('id', 'vol.L', 'area', 'deploy', 'N2Oug.L', 'CH4ug.L', 'CO2ug.L')]
ds <- dd[, c('id', 'vol.L', 'area', 'deploy', 'N2Oug.L')]
View(ds)
# making a csv file to be used to calculate the N2O flux with the HMR package
write.csv(ds, '../scripts/ds.csv', row.names = FALSE, quote = FALSE)
# using the HMR package to calulate the N2O flux
HMR(filename = 'ds.csv', dec = '.', sep = ',', LR.always = TRUE, FollowHMR = TRUE,
pfvar = 0.0001, IfNoSignal = 'LR', SatPct = 90, SatTimeMin = 2)
HMRds <- fread('HMR - ds.csv')
View(HMRds)
# make a combined ID for the HMR calc in order to track date, ID, and treatment after
dd$com.ID <- paste(dd$date, '-', dd$ID, '-', dd$treatment)
# make a combined ID for the HMR calc in order to track date, ID, and treatment after
dd$com.ID <- paste(dd$date.y, '-', dd$ID, '-', dd$treatment)
ddd <- dd[, c('com.id', 'vol.L', 'area', 'deploy', 'N2Oug.L', 'CH4ug.L', 'CO2ug.L')]
ds <- dd[, c('com.id', 'vol.L', 'area', 'deploy', 'N2Oug.L')]
# making a csv file to be used to calculate the N2O flux with the HMR package
write.csv(ds, '../scripts/ds.csv', row.names = FALSE, quote = FALSE)
# using the HMR package to calulate the N2O flux
HMR(filename = 'ds.csv', dec = '.', sep = ',', LR.always = TRUE, FollowHMR = TRUE,
pfvar = 0.0001, IfNoSignal = 'LR', SatPct = 90, SatTimeMin = 2)
HMRds <- fread('HMR - ds.csv')
# adding dates, plot ID, and treatment columns to HMRds data
HMRds[, c('date', 'ID', 'treat') := tstrsplit(Series, ' - ')]
ddd <- dd[, c('com.id', 'vol.L', 'area', 'deploy', 'N2Oug.L', 'CH4ug.L', 'CO2ug.L')]
# make a combined ID for the HMR calc in order to track date, ID, and treatment after
dd$com.id <- paste(dd$date.y, '-', dd$ID, '-', dd$treatment)
ddd <- dd[, c('com.id', 'vol.L', 'area', 'deploy', 'N2Oug.L', 'CH4ug.L', 'CO2ug.L')]
ds <- dd[, c('com.id', 'vol.L', 'area', 'deploy', 'N2Oug.L')]
# making a csv file to be used to calculate the N2O flux with the HMR package
write.csv(ds, '../scripts/ds.csv', row.names = FALSE, quote = FALSE)
# using the HMR package to calulate the N2O flux
HMR(filename = 'ds.csv', dec = '.', sep = ',', LR.always = TRUE, FollowHMR = TRUE,
pfvar = 0.0001, IfNoSignal = 'LR', SatPct = 90, SatTimeMin = 2)
HMRds <- fread('HMR - ds.csv')
# adding dates, plot ID, and treatment columns to HMRds data
HMRds[, c('date', 'ID', 'treat') := tstrsplit(Series, ' - ')]
# from ug h-1 m-2 to ug d-1 m-2
HMRds[, f0.h := f0 * 24]
HMRds[, cum.emis := {
dx <- diff(elapsed.days)
avg_flux <- (head(f0.h, -1) + tail(f0.h, -1)) / 2
c(0, cumsum(dx * avg_flux))
}, by = .(trial, basin)]
HMRds[, cum.emis := {
dx <- diff(elapsed.days)
avg_flux <- (head(f0.h, -1) + tail(f0.h, -1)) / 2
c(0, cumsum(dx * avg_flux))
}, by = .(ID)]
by = .(date, ID)]
#summarizing results based on treatment
HMRds.summ <- HMRds[, .(flux.mn = mean(f0), flux.sd = sd(f0)
#summarizing results based on treatment
HMRds.summ <- HMRds[, .(flux.mn = mean(f0), flux.sd = sd(f0),
#summarizing results based on treatment
HMRds.summ <- HMRds[, .(flux.mn = mean(f0), flux.sd = sd(f0),
#summarizing results based on treatment
HMRds.summ <- HMRds[, .(flux.mn = mean(f0), flux.sd = sd(f0))
by = .(date, ID)]
#summarizing results based on treatment
HMRds.summ <- HMRds[, .(flux.mn = mean(f0), flux.sd = sd(f0))
by = .(date, ID)]
#summarizing results based on treatment
HMRds.summ <- HMRds[, .(flux.mn = mean(f0), flux.sd = sd(f0)),
by = .(date, ID)]
View(HMRds.summ)
#summarizing results based on treatment
HMRds.summ <- HMRds[, .(flux.mn = mean(f0), flux.sd = sd(f0)),
by = .(date, treat)]
dt[, chamber := as.numeric(chamber)]
ggplot(dt[dt$chamber <= 18, ], aes(chamber, time, color = round)) +
geom_point() +
geom_line() +
facet_wrap(~ date)
dt[, time := as.numeric(time)]
ggplot(dt[dt$chamber <= 18, ], aes(chamber, time, color = round)) +
geom_point() +
facet_wrap(~ date)
ggplot(dt[dt$chamber <= 18, ], aes(chamber, time, color = round)) +
geom_point() +
facet_wrap(~ date)
# checking times for sampling
dt[, chamber := as.numeric(chamber)]
ggplot(dt[dt$chamber <= 18, ], aes(chamber, time, color = round)) +
geom_point() +
facet_wrap(~ date)
# setwd(dirname(file.choose())) # used to set wd in base r
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
source('clean.R')
source('mearge.R')
source('emis.R')
source('summ.R')
# checking times for sampling
dt[, chamber := as.numeric(chamber)]
ggplot(dt[dt$chamber <= 18, ], aes(chamber, time, color = round)) +
geom_point() +
facet_wrap(~ date)
ggplot(dt, aes(chamber, time, color = round)) +
geom_point() +
facet_wrap(~ date)
ggsave2x('../plots/chamber_times', height = 10, width = 10)
# checking CO2 levels
unique_dates <- unique(dd$date.y)
for (d in unique_dates){
df_subset <- dd[dd$date.x == d, ]
p <- ggplot(df_subset, aes(deploy, CO2ug.L)) +
geom_point() +
geom_line() +
facet_wrap(~ chamber, scales = 'free_y') +
ggtitle(paste('CO2 on', d)) +
theme_bw()
ggsave(filename = paste0('../plots/CO2 check/trial1/CO2_free_y_', d, '.png'), plot = p, width = 10, height = 10)
}
ggplot(dt, aes(chamber, time, color = round)) +
geom_point() +
facet_wrap(~ date)
# checking CO2 levels
unique_dates <- unique(dd$date.y)
for (d in unique_dates){
df_subset <- dd[dd$date.x == d, ]
p <- ggplot(df_subset, aes(deploy, CO2ug.L)) +
geom_point() +
geom_line() +
facet_wrap(~ chamber, scales = 'free_y') +
ggtitle(paste('CO2 on', d)) +
theme_bw()
ggsave(filename = paste0('../plots/CO2 check/CO2_free_y_', d, '.png'), plot = p, width = 10, height = 10)
}
View(dd)
df_subset <- dd[dd$date.y == d, ]
# checking CO2 levels
unique_dates <- unique(dd$date.y)
for (d in unique_dates){
df_subset <- dd[dd$date.y == d, ]
p <- ggplot(df_subset, aes(deploy, CO2ug.L)) +
geom_point() +
geom_line() +
facet_wrap(~ chamber, scales = 'free_y') +
ggtitle(paste('CO2 on', d)) +
theme_bw()
ggsave(filename = paste0('../plots/CO2 check/CO2_free_y_', d, '.png'), plot = p, width = 10, height = 10)
}
# checking N2O levels
# adding chamber number data to HMRds
unique_dates <- unique(dd$date.y)
HMRds <- merge(HMRds, unique(dd[, .(ID, chamber)]), by = 'basin', all.x = TRUE)
HMRds <- merge(HMRds, unique(dd[, .(ID, chamber)]), by = 'id', all.x = TRUE)
HMRds <- merge(HMRds, unique(dd[, .(ID, chamber)]), by = 'ID', all.x = TRUE)
for (d in unique_dates){
df_subset <- dd[dd$date.y == d, ]
labels_df <- unique(
HMRds[HMRds$date.y == d & HMRds$chamber %in% df_subset$chamber, c('chamber', 'Method')]
)
# Label positions per chamber
labels_df$x <- tapply(df_subset$deploy, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
labels_df$y <- tapply(df_subset$N2Oug.L, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
p <- ggplot(df_subset, aes(deploy, N2Oug.L)) +
geom_point() +
geom_line() +
facet_wrap(~ chamber, scales = 'free_y') +
ggtitle(paste('N2O on', d)) +
geom_text(data = labels_df, aes(x = x, y = y, label = Method), inherit.aes = FALSE, hjust = 1, vjust = 1, color = "red", size = 5) +
theme_bw()
ggsave(filename = paste0('../plots/N2O check/trial1/N2O_free_y_', d, '.png'), plot = p, width = 10, height = 10)
}
# checking N2O levels
# adding chamber number data to HMRds
unique_dates <- unique(dd$date.y)
HMRds <- merge(HMRds, unique(dd[, .(ID, chamber)]), by = 'ID', all.x = TRUE)
for (d in unique_dates){
df_subset <- dd[dd$date.y == d, ]
labels_df <- unique(
HMRds[HMRds$date.y == d & HMRds$chamber %in% df_subset$chamber, c('chamber', 'Method')]
)
# Label positions per chamber
labels_df$x <- tapply(df_subset$deploy, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
labels_df$y <- tapply(df_subset$N2Oug.L, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
p <- ggplot(df_subset, aes(deploy, N2Oug.L)) +
geom_point() +
geom_line() +
facet_wrap(~ chamber, scales = 'free_y') +
ggtitle(paste('N2O on', d)) +
geom_text(data = labels_df, aes(x = x, y = y, label = Method), inherit.aes = FALSE, hjust = 1, vjust = 1, color = "red", size = 5) +
theme_bw()
ggsave(filename = paste0('../plots/N2O check/N2O_free_y_', d, '.png'), plot = p, width = 10, height = 10)
}
View(HMRds)
# setwd(dirname(file.choose())) # used to set wd in base r
rm(list = ls())
source('packages.R')
source('functions.R')
source('load.R')
source('clean.R')
source('mearge.R')
source('emis.R')
source('summ.R')
# checking times for sampling
dt[, chamber := as.numeric(chamber)]
ggplot(dt, aes(chamber, time, color = round)) +
geom_point() +
facet_wrap(~ date)
# checking CO2 levels
unique_dates <- unique(dd$date.y)
for (d in unique_dates){
df_subset <- dd[dd$date.y == d, ]
p <- ggplot(df_subset, aes(deploy, CO2ug.L)) +
geom_point() +
geom_line() +
facet_wrap(~ chamber, scales = 'free_y') +
ggtitle(paste('CO2 on', d)) +
theme_bw()
ggsave(filename = paste0('../plots/CO2 check/CO2_free_y_', d, '.png'), plot = p, width = 10, height = 10)
}
# checking N2O levels
# adding chamber number data to HMRds
unique_dates <- unique(dd$date.y)
HMRds <- merge(HMRds, unique(dd[, .(ID, chamber)]), by = 'ID', all.x = TRUE)
for (d in unique_dates){
df_subset <- dd[dd$date.y == d, ]
labels_df <- unique(
HMRds[HMRds$date.y == d & HMRds$chamber %in% df_subset$chamber, c('chamber', 'Method')]
)
# Label positions per chamber
labels_df$x <- tapply(df_subset$deploy, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
labels_df$y <- tapply(df_subset$N2Oug.L, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
p <- ggplot(df_subset, aes(deploy, N2Oug.L)) +
geom_point() +
geom_line() +
facet_wrap(~ chamber, scales = 'free_y') +
ggtitle(paste('N2O on', d)) +
geom_text(data = labels_df, aes(x = x, y = y, label = Method), inherit.aes = FALSE, hjust = 1, vjust = 1, color = "red", size = 5) +
theme_bw()
ggsave(filename = paste0('../plots/N2O check/N2O_free_y_', d, '.png'), plot = p, width = 10, height = 10)
}
View(df_subset)
for (d in unique_dates){
df_subset <- dd[dd$date.x == d, ]
labels_df <- unique(
HMRds[HMRds$date.x == d & HMRds$chamber %in% df_subset$chamber, c('chamber', 'Method')]
)
# Label positions per chamber
labels_df$x <- tapply(df_subset$deploy, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
labels_df$y <- tapply(df_subset$N2Oug.L, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
p <- ggplot(df_subset, aes(deploy, N2Oug.L)) +
geom_point() +
geom_line() +
facet_wrap(~ chamber) +
ggtitle(paste('N2O on', d)) +
geom_text(data = labels_df, aes(x = 1.25, y = y, label = Method), inherit.aes = FALSE, hjust = 1, vjust = 1, color = "red", size = 5) +
theme_bw() +
ylim(0, 1.6)
ggsave(filename = paste0('../plots/N2O check/trial1/N2O_fixed_y_', d, '.png'), plot = p, width = 10, height = 10)
}
for (d in unique_dates){
df_subset <- dd[dd$date.y == d, ]
labels_df <- unique(
HMRds[HMRds$date.y == d & HMRds$chamber %in% df_subset$chamber, c('chamber', 'Method')]
)
# Label positions per chamber
labels_df$x <- tapply(df_subset$deploy, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
labels_df$y <- tapply(df_subset$N2Oug.L, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
p <- ggplot(df_subset, aes(deploy, N2Oug.L)) +
geom_point() +
geom_line() +
facet_wrap(~ chamber) +
ggtitle(paste('N2O on', d)) +
geom_text(data = labels_df, aes(x = 1.25, y = y, label = Method), inherit.aes = FALSE, hjust = 1, vjust = 1, color = "red", size = 5) +
theme_bw() +
ylim(0, 1.6)
ggsave(filename = paste0('../plots/N2O check/trial1/N2O_fixed_y_', d, '.png'), plot = p, width = 10, height = 10)
}
for (d in unique_dates){
df_subset <- dd[dd$date.y == d, ]
labels_df <- unique(
HMRds[HMRds$date.y == d & HMRds$chamber %in% df_subset$chamber, c('chamber', 'Method')]
)
# Label positions per chamber
labels_df$x <- tapply(df_subset$deploy, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
labels_df$y <- tapply(df_subset$N2Oug.L, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
p <- ggplot(df_subset, aes(deploy, N2Oug.L)) +
geom_point() +
geom_line() +
facet_wrap(~ chamber) +
ggtitle(paste('N2O on', d)) +
geom_text(data = labels_df, aes(x = 1.25, y = y, label = Method), inherit.aes = FALSE, hjust = 1, vjust = 1, color = "red", size = 5) +
theme_bw() +
ylim(0, 1.6)
ggsave(filename = paste0('../plots/N2O check/N2O_fixed_y_', d, '.png'), plot = p, width = 10, height = 10)
}
for (d in unique_dates){
df_subset <- dd[dd$date.y == d, ]
labels_df <- unique(
HMRds[HMRds$date.y == d & HMRds$chamber %in% df_subset$chamber, c('chamber', 'Method')]
)
# Label positions per chamber
labels_df$x <- tapply(df_subset$deploy, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
labels_df$y <- tapply(df_subset$N2Oug.L, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
p <- ggplot(df_subset, aes(deploy, N2Oug.L)) +
geom_point() +
geom_line() +
facet_wrap(~ chamber) +
ggtitle(paste('N2O on', d)) +
geom_text(data = labels_df, aes(x = 1.25, y = y, label = Method), inherit.aes = FALSE, hjust = 1, vjust = 1, color = "red", size = 5) +
theme_bw() +
ylim(0, 3.1)
ggsave(filename = paste0('../plots/N2O check/N2O_fixed_y_', d, '.png'), plot = p, width = 10, height = 10)
}
# checking N2O levels
# adding chamber number data to HMRds
unique_dates <- unique(dd$date.y)
HMRds <- merge(HMRds, unique(dd[, .(ID, chamber)]), by = 'ID', all.x = TRUE)
HMRds <- fread('HMR - ds.csv')
# adding dates, plot ID, and treatment columns to HMRds data
HMRds[, c('date', 'ID', 'treat') := tstrsplit(Series, ' - ')]
# checking N2O levels
# adding chamber number data to HMRds
unique_dates <- unique(dd$date.y)
HMRds <- merge(HMRds, unique(dd[, .(ID, chamber)]), by = 'ID', all.x = TRUE)
View(HMRds)
for (d in unique_dates){
df_subset <- dd[dd$date.y == d, ]
labels_df <- unique(
HMRds[HMRds$date == d & HMRds$chamber %in% df_subset$chamber, c('chamber', 'Method')]
)
# Label positions per chamber
labels_df$x <- tapply(df_subset$deploy, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
labels_df$y <- tapply(df_subset$N2Oug.L, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
p <- ggplot(df_subset, aes(deploy, N2Oug.L)) +
geom_point() +
geom_line() +
facet_wrap(~ chamber, scales = 'free_y') +
ggtitle(paste('N2O on', d)) +
geom_text(data = labels_df, aes(x = x, y = y, label = Method), inherit.aes = FALSE, hjust = 1, vjust = 1, color = "red", size = 5) +
theme_bw()
ggsave(filename = paste0('../plots/N2O check/N2O_free_y_', d, '.png'), plot = p, width = 10, height = 10)
}
for (d in unique_dates){
df_subset <- dd[dd$date.y == d, ]
labels_df <- unique(
HMRds[HMRds$date == d & HMRds$chamber %in% df_subset$chamber, c('chamber', 'Method')]
)
# Label positions per chamber
labels_df$x <- tapply(df_subset$deploy, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
labels_df$y <- tapply(df_subset$N2Oug.L, df_subset$chamber, max, na.rm = TRUE)[labels_df$chamber]
p <- ggplot(df_subset, aes(deploy, N2Oug.L)) +
geom_point() +
geom_line() +
facet_wrap(~ chamber) +
ggtitle(paste('N2O on', d)) +
geom_text(data = labels_df, aes(x = 1.25, y = y, label = Method), inherit.aes = FALSE, hjust = 1, vjust = 1, color = "red", size = 5) +
theme_bw() +
ylim(0, 3.1)
ggsave(filename = paste0('../plots/N2O check/N2O_fixed_y_', d, '.png'), plot = p, width = 10, height = 10)
}
# plotting emission
# individual chamber:
ggplot(HMRds, aes(date.x, f0, color = treat)) +
geom_point() +
geom_line(aes(group = basin)) +
facet_grid(trial ~ soil) +
theme_bw() +
xlab('date') + ylab('NA')
# plotting emission
# individual chamber:
ggplot(HMRds, aes(date.x, f0, color = treat)) +
geom_point() +
geom_line(aes(group = ID)) +
theme_bw() +
xlab('date') + ylab('NA')
